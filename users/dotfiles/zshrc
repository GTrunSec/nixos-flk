#! /usr/bin/env zsh
autoload -Uz promptinit
promptinit
# zsh-mime-setup
autoload colors
colors
autoload -Uz zmv # move function
#autoload -Uz zed # edit functions within zle

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
}

if [ -n "''${commands[fzf - share]}" ]; then
    source "$(fzf-share)/key-bindings.zsh"
fi


function prev() {
    PREV=$(fc -lrn | head -n 1)
    sh -c "pet new $(printf %q "$PREV")"
}

function pet-select() {
    BUFFER=$(pet search --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle redisplay
}

function jupyter-env() {
    cd ~/data/Jupyter-data-science-environment
    nix-shell my-default.nix --option build-use-sandbox false --command "jupyter lab --ip $1 --config jupyter_notebook_config.py"
}

zle -N pet-select
stty -ixon
bindkey '^s' pet-select

bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

export TERM=xterm-256color

if [[ "$OSTYPE" == "darwin"* ]]; then
fi

export EDITOR="emacsclient -nw"
export VISUAL=$EDITOR

[[ -n "$key[Up]" ]] && bindkey -- "$key[Up]" up-line-or-beginning-search
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" down-line-or-beginning-search

unalias z
eval "$(zoxide init zsh)"

function _nix() {
    local ifs_bk="$IFS"
    local input=("${(Q)words[@]}")
    IFS=$'\n'
    local res=($(NIX_GET_COMPLETIONS=$((CURRENT - 1)) "$input[@]"))
    IFS="$ifs_bk"
    local tpe="${${res[1]}%%>	*}"
    local -a suggestions
    declare -a suggestions
    for suggestion in ${res:1}; do
        # FIXME: This doesn't work properly if the suggestion word contains a `:`
        # itself
        suggestions+="${suggestion/	/:}"
    done
    if [[ "$tpe" == filenames ]]; then
        compadd -f
    fi
    _describe 'nix' suggestions
}

compdef _nix nix

