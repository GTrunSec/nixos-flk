#+TITLE: GuangTao's Xah Fly Keys config
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+SETUPFILE: ~/.config/nixpkgs/dotfiles/doom-emacs/hugo.setup
#+SETUPFILE: ~/.config/nixpkgs/dotfiles/doom-emacs/theme-readtheorg.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t


- [[http://ergoemacs.org/misc/xah-fly-keys_customization.html][Emacs: Xah Fly Keys Customization]]
- [[http://ergoemacs.org/misc/xah-fly-keys_tutorial.html][Emacs: Xah Fly Keys Tutorial]]

* use package with xah-fly-keys
- https://github.com/xahlee/xah-fly-keys/blob/master/xah-fly-keys.el#L3454
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(use-package! xah-fly-keys
  :init
  (require 'xah-fly-keys)
  ;;disable xah-fly-shared-map
  (define-key xah-fly-shared-map (kbd "C-n") nil)
  (define-key xah-fly-shared-map (kbd "C-a") nil)
  :config
  (xah-fly-keys 1)
  ;; FIXEME: end line with under headlines
#+END_SRC


* define-key xah-fly-keys-map(Command mode)
:PROPERTIES:
:ID:       f2cf8f5c-5f8f-4727-8ce0-de5ca5b13fa9
:END:
- [[https://github.com/xahlee/xah-fly-keys/blob/master/xah-fly-keys.el#L3392][xah-fly-keys/xah-fly-keys.el at master Â· xahlee/xah-fly-keys]]
**  Index Owner Customization keys
:PROPERTIES:
:ID:       377062dc-cbce-4302-9f39-f25c175d4ae6
:END:
:BACKLINKS:
[2020-10-13 Tue 16:47] <- [[id:c25ad90a-bafb-4fd6-936e-88331bbed6a0][r-keymap -> regex]]
:END:
- [[id:49646c11-6a30-4ded-9345-d444f97fcfc9][s-keymap]]
- [[id:d679148a-220c-47a5-9891-c4158f8255d3][p-keymap]]
- [[id:c25ad90a-bafb-4fd6-936e-88331bbed6a0][r-keymap -> regex]]
**  xah-fly-key-map
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
:bind
(:map xah-fly-key-map
 ("ESC" . nil)
 ("DEL" . nil)
 
 ("a" . counsel-M-x)
 ("b" . backward-word)
 ("c" . xah-copy-line-or-region)
 ("d" . xah-end-of-line-or-block)
 ("e" . xah-beginning-of-line-or-block)
 ("f" . xah-fly-insert-mode-activate)

 ("g" . backward-word)
 ("h" . forward-word)

 ("s" . gtrun-s-keymap)
 ("i" . previous-line)
 ("j" . forward-char)
 ("k" . next-line)
 ("l" . backward-char)
 ("m" . isearch-backward)
 ("n" . isearch-forward)

 ("o" . xah-delete-current-text-block)
 ("p" . xah-fly-p-keymap)
 ("q" . quit-window)
 ("r" . gtrun-r-keymap)
 ("t" . set-mark-command)

 ("u" . undo-fu-only-redo)
 ("v" . xah-paste-or-paste-previous)
 ("w" . ace-window)
 ("x" . xah-cut-line-or-region)
 ("y" . undo-fu-only-undo)
 ("z" . xah-goto-matching-bracket)



 ("[" . xah-backward-punct)
 ("]" . xah-forward-punct)


 ("1" . xah-extend-selection)
 ("2" . xah-select-line)
 ("3" . delete-other-windows)
 ("4" . split-window-below)
 ("5" . delete-char)
 ("6" . xah-select-block)
 ("7" . xah-select-line)
 ("8" . xah-extend-selection)
 ("9" . xah-select-text-in-quote)
 ("0" . xah-pop-local-mark-ring)

 ("C-s" . swiper-isearch)
 ("C-c i" . counsel-imenu)
 ("C-v" . scrollkeeper-contents-up)
 ("C-x c" . xah-fly-command-mode-activate)
 )

#+end_src

* specific keys in different mode map
** load all of specific keys
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
:config
(define-key xah-fly-key-map (kbd ".") 'gtrun-xah-fly-keys-dot) (define-key xah-fly-key-map (kbd "s-p") 'gtrun-xah-fly-keys-P) (define-key xah-fly-key-map (kbd "-") 'gtrun-xah-fly-keys-minus) (define-key xah-fly-key-map (kbd "/") 'gtrun-xah-fly-keys-slash) (define-key xah-fly-key-map (kbd ",") 'gtrun-xah-fly-keys-comma) (define-key xah-fly-key-map (kbd ";") 'gtrun-xah-fly-keys-semicolon)
(define-key xah-fly-key-map (kbd "'") 'gtrun-xah-fly-keys-apostrophe)
#+end_src
** Only Linux keys
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(when (eq system-type 'gnu/linux)
  (when (display-graphic-p)
  (define-key xah-fly-key-map (kbd "r") 'eaf-open)
  (define-key xah-fly-key-map (kbd "w") 'snails)
  ))

;; (when (display-graphic-p)
;;  (define-key key-translation-map (kbd "ESC") (kbd "C-x c"))
;; )
#+end_src
** .-dot
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-dot ()
  "key `.'"
  (interactive)
  (cond
   ((eq major-mode 'org-mode) (call-interactively 'org-edit-src-code))
   ((eq major-mode 'org-tanglesync-mode) (call-interactively 'org-edit-src-code))
   ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-up))
   (t nil)))
#+end_src

** ,-comma
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-comma ()
  "key `,'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'w3m-mode) (call-interactively 'scrollkeeper-contents-down))
   ((eq major-mode 'elfeed-show-mode) (call-interactively 'scrollkeeper-contents-down))
   ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-down))
   (t nil)))
#+end_src

** /-slash
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-slash ()
  "key `/'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'vinegar/dired-diff))
   ((eq major-mode 'w3m-mode) (call-interactively 'w3m-bookmark-add-current-url))
   ((eq major-mode 'org-agenda-mode) (call-interactively 'org-agenda-filter-by-tag))
   ((eq major-mode 'org-mode) (call-interactively 'helm-org-agenda-files-headings))
   ((eq major-mode 'elfeed-search-mode) (call-interactively 'elfeed-update))
   ((eq major-mode 'ess-julia-mode) (call-interactively 'julia-mode))
   (t nil)))
#+end_src

** ;-semicolon
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-semicolon ()
  "key `;'"
  (interactive)
  (cond
   ((eq major-mode 'org-mode) (call-interactively 'org-super-links-store-link))

   (t nil)))
#+end_src
** '-apostrophe
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-apostrophe ()
  "key `''"
  (interactive)
  (cond
   ((eq major-mode 'org-mode) (call-interactively 'org-super-links-insert-link))

   (t nil)))
#+end_src

** =-e
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-equality-fly-keys ()
  "key `='"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   (t nil)))

#+end_src

** p-keymap
:PROPERTIES:
:ID:       d679148a-220c-47a5-9891-c4158f8255d3
:END:
:BACKLINKS:
[2020-09-23 Wed 03:14] <- [[id:f2cf8f5c-5f8f-4727-8ce0-de5ca5b13fa9][define-key xah-fly-keys-map(Command mode)]]
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(xah-fly--define-keys
 (define-prefix-command 'xah-fly-p-keymap)
 '(
   ("," . xah-open-in-external-app)
   ("." . find-file)
   ("c" . bookmark-bmenu-list)
   ("e" . ibuffer)
   ("u" . xah-open-file-at-cursor)
   ("h" . recentf-open-files)
   ("i" . xah-copy-file-path)
   ("l" . bookmark-set)
   ("n" . xah-new-empty-buffer)
   ("o" . xah-show-in-desktop)
   ("p" . xah-open-last-closed)
   ("f" . xah-open-recently-closed)
   ("y" . xah-list-recently-closed)
   ("r" . xah-open-file-fast)
   ("s" . write-file)
   ))
#+end_src

** s-keymap
:PROPERTIES:
:ID:       49646c11-6a30-4ded-9345-d444f97fcfc9
:END:
:BACKLINKS:
[2020-10-13 Tue 17:00] <- [[*Index Owner Customization keys][Index Owner Customization keys]]
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(xah-fly--define-keys
 (define-prefix-command 'gtrun-s-keymap)
 '(
   ("a" . mark-whole-buffer)
   ("s" . save-buffer)
   ))
#+end_src

** r-keymap -> regex
:PROPERTIES:
:ID:       c25ad90a-bafb-4fd6-936e-88331bbed6a0
:END:
:BACKLINKS:
[2020-10-13 Tue 18:21] <- [[*Index Owner Customization keys][Index Owner Customization keys]]
:END:
:RELATED:
[2020-10-13 Tue 16:47] -> [[id:377062dc-cbce-4302-9f39-f25c175d4ae6][Index Owner Customization keys]]
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(xah-fly--define-keys
 (define-prefix-command 'gtrun-r-keymap)
 '(
   ("r" . color-rg-search-input)
   ))
#+end_src
** P-keymap
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-P ()
  "key `P'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'xah-show-in-desktop))
   (t nil)))
#+end_src

** --minus
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-minus ()
  "key `-'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'vinegar/up-directory))
   (t nil)))
#+end_src

** Color
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; (defun my-highlight-line-on () (global-hl-line-mode 1))
;; (defun my-highlight-line-off () (global-hl-line-mode 0))

;; (add-hook! 'xah-fly-command-mode-activate-hook 'my-highlight-line-on)
;; (add-hook! 'xah-fly-insert-mode-activate-hook  'my-highlight-line-off)

;; (defun my-xfk-command-color () (set-background-color "DeepSkyBlue"))
;; (defun my-xfk-insert-color () (set-background-color "IndianRed"))

;; (add-hook! 'xah-fly-command-mode-activate-hook 'my-xfk-command-color)
;; (add-hook! 'xah-fly-insert-mode-activate-hook  'my-xfk-insert-color)
#+end_src

* define-key xah-fly-leader-key-map
:PROPERTIES:
:ID:       428d5810-1acc-46d4-9fd5-19af6d0d8cc6
:END:
 - [[id:7e984d98-fdbf-4d94-84c5-ce4605d9816f][magit-keys (leader-key to "m")]]
 - [[id:2755ee61-1f79-4e5b-bd69-d7c730bb28e4][org-keys (leader-key to "o")]]
 - [[id:38c793b6-7b4e-4da4-b647-03a62237249a][search-keys (leader-key to "s")]]
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-leader-key-map)
   '(
     ("DEL" . keyboard-quit)
     ("m" . magit-keys)
     ("o" . org-keys)
     ("s" . search-keys)
     ;;timer
     ("ti" . insert-current-date-time-inactive)
     ("ta" . insert-current-date-time-active)
     ("tc" . insert-current-date-time)
     ;;find file
     ("fr" . counsel-recentf)
     ("fp" . doom/find-file-in-private-config)
     ("<tab>" . spacemacs/alternate-buffer)
     ("ff" . counsel-file-jump)
     ("RET" . helm-bookmarks)
     ;; treemacs
     ("tt" . +treemacs/toggle)
     ("tf" . +treemacs/find-file)
     ;; helm
     ("bb" . switch-to-buffer)
     ("bs" . bookmark-set)
     ("bm" . bookmark-bmenu-list)
     ("bt" . bm-toggle)
     ;; dired
     ("dw" . dired-other-window)
     ("df" . dired-other-frame)
))

#+END_SRC

* search-keys (leader-key to "s")
:PROPERTIES:
:ID:       38c793b6-7b4e-4da4-b647-03a62237249a
:END:
:BACKLINKS:
[2020-09-23 Wed 03:25] <- [[id:428d5810-1acc-46d4-9fd5-19af6d0d8cc6][define-key xah-fly-leader-key-map]]
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
  (xah-fly--define-keys
   ;; create a keymap my-keymap
   (define-prefix-command 'search-keys)
   '(
     ("a" . counsel-ag)
     ("r" . counsel-rg)
     ("y" . xah-search-current-word)
     ("m" . maple-iedit-match-next)
     ("i" . org-roam-insert)
     ("d" . org-super-links-quick-insert-drawer-link)
     ("l" . org-super-links-quick-insert-inline-link)
     ;;
     ))
#+END_SRC
* org-keys (leader-key to "o")
:PROPERTIES:
:ID:       2755ee61-1f79-4e5b-bd69-d7c730bb28e4
:END:
:BACKLINKS:
[2020-09-23 Wed 03:24] <- [[id:428d5810-1acc-46d4-9fd5-19af6d0d8cc6][define-key xah-fly-leader-key-map]]
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
  (xah-fly--define-keys
   ;; create a keymap org-keymap
   (define-prefix-command 'org-keys)
   '(
     ("i" . org-clock-in)
     ("o" . org-clock-out)
     ("a" . org-agenda)
     ))
#+end_src

* magit-keys (leader-key to "m")
:PROPERTIES:
:ID:       7e984d98-fdbf-4d94-84c5-ce4605d9816f
:END:
:BACKLINKS:
[2020-09-23 Wed 03:22] <- [[id:428d5810-1acc-46d4-9fd5-19af6d0d8cc6][define-key xah-fly-leader-key-map]]
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
  (xah-fly--define-keys
   ;; create a keymap magit-keymap
   (define-prefix-command 'magit-keys)
   '(
     ("s" . magit)
     ))
#+end_src

* end use-package config setting
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; FIXME: end line to xah-fly-keys
)
#+end_src
* define global-set-key
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(global-set-key (kbd "<f3>") 'gtrun/hydra-org-starter/body)
(global-set-key (kbd "<f4>") 'xah-fly-command-mode-activate)
(global-set-key (kbd "<f5>") 'notdeft)
(global-set-key (kbd "ESC ESC") 'xah-fly-command-mode-activate)
#+end_src

** org-mode set key
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(global-set-key (kbd "M-s d") 'org-super-links-quick-insert-drawer-link)
(global-set-key (kbd "M-s l") 'org-super-links-quick-insert-inline-link)
(global-set-key (kbd "M-s v") 'org-brain-visualize-dwim)
(global-set-key (kbd "M-s i") 'org-super-links-insert-link)
(global-set-key (kbd "M-s s") 'org-super-links-store-link)
(global-set-key (kbd "C-M-s-<right>") 'switch-to-next-buffer)
(global-set-key (kbd "C-M-s-<left>") 'switch-to-prev-buffer)
(global-set-key (kbd "M-s z") 'org-z-insert-link)
(global-set-key (kbd "M-s n") 'org-z-knowledge-search)
(global-set-key (kbd "M-s f") 'org-roam-insert)
#+end_src


#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(when IS-MAC
  (global-set-key (kbd "C-x c d") 'org-super-links-quick-insert-drawer-link)
  (global-set-key (kbd "C-x c l") 'org-super-links-quick-insert-inline-link)
  (global-set-key (kbd "C-x c v") 'org-brain-visualize-dwim)
  (global-set-key (kbd "C-x c i") 'org-super-links-insert-link)
  (global-set-key (kbd "C-x c s") 'org-super-links-store-link)
  (global-set-key (kbd "C-x c z") 'org-z-insert-link)
  (global-set-key (kbd "C-x c n") 'org-z-knowledge-search)
)
#+end_src

* add hook to active xah-fly-keys insert or command mode
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(add-hook! 'xah-fly-command-mode-activate-hook 'xah-fly-save-buffer-if-file)
(add-hook! 'magit-mode-hook 'xah-fly-insert-mode-activate)
(add-hook! 'snails-mode-hook 'xah-fly-insert-mode-activate)
(add-hook! 'sunrise-start-hook 'xah-fly-insert-mode-activate)
(add-hook! 'dired-hook 'xah-fly-insert-mode-activate)
(add-hook! 'color-rg-mode-hook 'xah-fly-insert-mode-activate)
#+end_src
* â CANCELED define-key xah-fly-keys-map(Insert mode)
:LOGBOOK:
- State "â CANCELED" from              [2020-09-24 Thu 19:46] \\
  crashed
:END:
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; (defun xah-fly-insert-mode-init ()
;;   (xah-fly--define-keys
;;    xah-fly-key-map
;;    '(
;;      ("SPC" . nil)
;;      ("DEL" . nil)

;;      ("a" . nil)
;;      ("b" . nil)
;;      ("c" . nil)
;;      ("d" . nil)
;;      ("e" . nil)
;;      ("f" . nil)
;;      ("g" . nil)

;;      ("h" . nil)
;;      ("i" . nil)
;;      ("j" . nil)
;;      ("k" . nil)
;;      ("l" . nil)
;;      ("m" . nil)
;;      ("n" . nil)

;;      ("o" . nil)
;;      ("p" . nil)
;;      ("q" . nil)
;;      ("r" . nil)
;;      ("s" . nil)
;;      ("t" . nil)

;;      ("u" . nil)
;;      ("v" . nil)
;;      ("w" . nil)
;;      ("x" . nil)
;;      ("y" . nil)
;;      ("z" . nil)

;;      ("1" . nil)
;;      ("2" . nil)
;;      ("3" . nil)
;;      ("4" . nil)
;;      ("5" . nil)
;;      ("6" . nil)
;;      ("7" . nil)
;;      ("9" . nil)
;;      ("0" . nil)


;;      ("/" . nil)
;;      ("-" . nil)
;;      ("." . nil)
;;      ("," . nil)
;;      (";" . nil)
;;      ("'" . nil)
;;      ("[" . nil)
;;      ("]" . nil)
;;      ("\\" . nil)
;;      ("'" . nil)
;;      ("C-s" . swiper-isearch)
;;      ("C-c i" . counsel-imenu)
;;      ("C-v" . scrollkeeper-contents-up)
;;      ("C-x c" . xah-fly-command-mode-activate)
;;      ("<f3>" . gtrun/hydra-org-starter/body)
;;      ("<f4>" . xah-fly-command-mode-activate)
;;      ("<f5>" . awesome-tab-ace-jump)
;;      ;; more
;;      ))
;;   )

#+end_src
